/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';
import { environment } from 'src/environments/environment';

export const API_BASE_URL = environment.baseUrl;

@Injectable()
export class KadaService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : environment.baseUrl;
    }

     /**
     * @param body (optional) 
     * @return Success
     */
     getArticleListPage(body: SearchDTO | undefined): Observable<ArticleDTOSearchResult> {
        let url_ = this.baseUrl + "/api/Article/GetArticleListPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetArticleListPage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetArticleListPage(<any>response_);
                } catch (e) {
                    return <Observable<ArticleDTOSearchResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<ArticleDTOSearchResult>><any>_observableThrow(response_);
        }));
    }

    protected processGetArticleListPage(response: HttpResponseBase): Observable<ArticleDTOSearchResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ArticleDTOSearchResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ArticleDTOSearchResult>(<any>null);
    }

    /**
     * @return Success
     */
    getArticle(id: string): Observable<ArticleDTO> {
        let url_ = this.baseUrl + "/api/Article/GetArticle/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetArticle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetArticle(<any>response_);
                } catch (e) {
                    return <Observable<ArticleDTO>><any>_observableThrow(e);
                }
            } else
                return <Observable<ArticleDTO>><any>_observableThrow(response_);
        }));
    }

    protected processGetArticle(response: HttpResponseBase): Observable<ArticleDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ArticleDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ArticleDTO>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Created
     */
    createArticle(body: CreateArticleCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Article/CreateArticle";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateArticle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateArticle(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreateArticle(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return No Content
     */
    updateArticle(body: UpdateArticleCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Article/UpdateArticle";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateArticle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateArticle(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateArticle(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * @return No Content
     */
    deleteArticle(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Article/DeleteArticle/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteArticle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteArticle(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteArticle(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getCaracteristiqueListPage(body: SearchDTO | undefined): Observable<CaracteristiqueDTOSearchResult> {
        let url_ = this.baseUrl + "/api/Caracteristique/GetCaracteristiqueListPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCaracteristiqueListPage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCaracteristiqueListPage(<any>response_);
                } catch (e) {
                    return <Observable<CaracteristiqueDTOSearchResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<CaracteristiqueDTOSearchResult>><any>_observableThrow(response_);
        }));
    }

    protected processGetCaracteristiqueListPage(response: HttpResponseBase): Observable<CaracteristiqueDTOSearchResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CaracteristiqueDTOSearchResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CaracteristiqueDTOSearchResult>(<any>null);
    }

    /**
     * @return Success
     */
    getCaracteristique(id: string): Observable<CaracteristiqueDTO> {
        let url_ = this.baseUrl + "/api/Caracteristique/GetCaracteristique/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCaracteristique(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCaracteristique(<any>response_);
                } catch (e) {
                    return <Observable<CaracteristiqueDTO>><any>_observableThrow(e);
                }
            } else
                return <Observable<CaracteristiqueDTO>><any>_observableThrow(response_);
        }));
    }

    protected processGetCaracteristique(response: HttpResponseBase): Observable<CaracteristiqueDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CaracteristiqueDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CaracteristiqueDTO>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Created
     */
    createCaracteristique(body: CreateCaracteristiqueCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Caracteristique/CreateCaracteristique";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateCaracteristique(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateCaracteristique(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreateCaracteristique(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return No Content
     */
    updateCaracteristique(body: UpdateCaracteristiqueCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Caracteristique/UpdateCaracteristique";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateCaracteristique(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateCaracteristique(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateCaracteristique(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * @return No Content
     */
    deleteCaracteristique(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Caracteristique/DeleteCaracteristique/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteCaracteristique(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteCaracteristique(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteCaracteristique(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getClientListPage(body: SearchDTO | undefined): Observable<ClientDtoSearchResult> {
        let url_ = this.baseUrl + "/api/Client/GetClientListPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetClientListPage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetClientListPage(<any>response_);
                } catch (e) {
                    return <Observable<ClientDtoSearchResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<ClientDtoSearchResult>><any>_observableThrow(response_);
        }));
    }

    protected processGetClientListPage(response: HttpResponseBase): Observable<ClientDtoSearchResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClientDtoSearchResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ClientDtoSearchResult>(<any>null);
    }

    /**
     * @return Success
     */
    getClient(id: string): Observable<ClientDto> {
        let url_ = this.baseUrl + "/api/Client/GetClient/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetClient(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetClient(<any>response_);
                } catch (e) {
                    return <Observable<ClientDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ClientDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetClient(response: HttpResponseBase): Observable<ClientDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClientDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ClientDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Created
     */
    createClient(body: CreateClientCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Client/CreateClient";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateClient(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateClient(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreateClient(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return No Content
     */
    updateClient(id: string, body: UpdateClientCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Client/UpdateClient/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateClient(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateClient(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateClient(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * @return No Content
     */
    deleteClient(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Client/DeleteClient/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteClient(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteClient(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteClient(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getCouleurListPage(body: SearchDTO | undefined): Observable<CouleurDTOSearchResult> {
        let url_ = this.baseUrl + "/api/Couleur/GetCouleurListPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCouleurListPage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCouleurListPage(<any>response_);
                } catch (e) {
                    return <Observable<CouleurDTOSearchResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<CouleurDTOSearchResult>><any>_observableThrow(response_);
        }));
    }

    protected processGetCouleurListPage(response: HttpResponseBase): Observable<CouleurDTOSearchResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CouleurDTOSearchResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CouleurDTOSearchResult>(<any>null);
    }

    /**
     * @return Success
     */
    getCouleur(id: string): Observable<CouleurDTO> {
        let url_ = this.baseUrl + "/api/Couleur/GetCouleur/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCouleur(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCouleur(<any>response_);
                } catch (e) {
                    return <Observable<CouleurDTO>><any>_observableThrow(e);
                }
            } else
                return <Observable<CouleurDTO>><any>_observableThrow(response_);
        }));
    }

    protected processGetCouleur(response: HttpResponseBase): Observable<CouleurDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CouleurDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CouleurDTO>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Created
     */
    createCouleur(body: CreateCouleurCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Couleur/CreateCouleur";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateCouleur(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateCouleur(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreateCouleur(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return No Content
     */
    updateCouleur(body: UpdateCouleurCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Couleur/UpdateCouleur";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateCouleur(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateCouleur(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateCouleur(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * @return No Content
     */
    deleteCouleur(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Couleur/DeleteCouleur/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteCouleur(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteCouleur(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteCouleur(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getEtatListPage(body: SearchDTO | undefined): Observable<EtatDTOSearchResult> {
        let url_ = this.baseUrl + "/api/Etat/GetEtatListPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEtatListPage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEtatListPage(<any>response_);
                } catch (e) {
                    return <Observable<EtatDTOSearchResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<EtatDTOSearchResult>><any>_observableThrow(response_);
        }));
    }

    protected processGetEtatListPage(response: HttpResponseBase): Observable<EtatDTOSearchResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EtatDTOSearchResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EtatDTOSearchResult>(<any>null);
    }

    /**
     * @return Success
     */
    getEtat(id: string): Observable<EtatDTO> {
        let url_ = this.baseUrl + "/api/Etat/GetEtat/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEtat(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEtat(<any>response_);
                } catch (e) {
                    return <Observable<EtatDTO>><any>_observableThrow(e);
                }
            } else
                return <Observable<EtatDTO>><any>_observableThrow(response_);
        }));
    }

    protected processGetEtat(response: HttpResponseBase): Observable<EtatDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EtatDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EtatDTO>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Created
     */
    createEtat(body: CreateEtatCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Etat/CreateEtat";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateEtat(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateEtat(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreateEtat(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return No Content
     */
    updateEtat(body: UpdateEtatCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Etat/UpdateEtat";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateEtat(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateEtat(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateEtat(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * @return No Content
     */
    deleteEtat(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Etat/DeleteEtat/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteEtat(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteEtat(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteEtat(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getFournisseurListPage(body: SearchDTO | undefined): Observable<FournisseurDtoSearchResult> {
        let url_ = this.baseUrl + "/api/Fournisseur/GetFournisseurListPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFournisseurListPage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFournisseurListPage(<any>response_);
                } catch (e) {
                    return <Observable<FournisseurDtoSearchResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<FournisseurDtoSearchResult>><any>_observableThrow(response_);
        }));
    }

    protected processGetFournisseurListPage(response: HttpResponseBase): Observable<FournisseurDtoSearchResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FournisseurDtoSearchResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FournisseurDtoSearchResult>(<any>null);
    }

    /**
     * @return Success
     */
    getFournisseur(id: string): Observable<FournisseurDto> {
        let url_ = this.baseUrl + "/api/Fournisseur/GetFournisseur/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFournisseur(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFournisseur(<any>response_);
                } catch (e) {
                    return <Observable<FournisseurDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<FournisseurDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetFournisseur(response: HttpResponseBase): Observable<FournisseurDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FournisseurDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FournisseurDto>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Created
     */
    createFournisseur(body: CreateFournisseurCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Fournisseur/CreateFournisseur";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateFournisseur(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateFournisseur(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreateFournisseur(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return No Content
     */
    updateFournisseur(body: UpdateFournisseurCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Fournisseur/UpdateFournisseur";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateFournisseur(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateFournisseur(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateFournisseur(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * @return No Content
     */
    deleteFournisseur(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Fournisseur/DeleteFournisseur/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteFournisseur(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteFournisseur(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteFournisseur(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getMarqueListPage(body: SearchDTO | undefined): Observable<MarqueDTOSearchResult> {
        let url_ = this.baseUrl + "/api/Marque/GetMarqueListPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMarqueListPage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMarqueListPage(<any>response_);
                } catch (e) {
                    return <Observable<MarqueDTOSearchResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<MarqueDTOSearchResult>><any>_observableThrow(response_);
        }));
    }

    protected processGetMarqueListPage(response: HttpResponseBase): Observable<MarqueDTOSearchResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MarqueDTOSearchResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MarqueDTOSearchResult>(<any>null);
    }

    /**
     * @return Success
     */
    getMarque(id: string): Observable<MarqueDTO> {
        let url_ = this.baseUrl + "/api/Marque/GetMarque/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMarque(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMarque(<any>response_);
                } catch (e) {
                    return <Observable<MarqueDTO>><any>_observableThrow(e);
                }
            } else
                return <Observable<MarqueDTO>><any>_observableThrow(response_);
        }));
    }

    protected processGetMarque(response: HttpResponseBase): Observable<MarqueDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MarqueDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MarqueDTO>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Created
     */
    createMarque(body: CreateMarqueCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Marque/CreateMarque";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateMarque(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateMarque(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreateMarque(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return No Content
     */
    updateMarque(body: UpdateMarqueCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Marque/UpdateMarque";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateMarque(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateMarque(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateMarque(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * @return No Content
     */
    deleteMarque(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Marque/DeleteMarque/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteMarque(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteMarque(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteMarque(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getModelListPage(body: SearchDTO | undefined): Observable<ModelDTOSearchResult> {
        let url_ = this.baseUrl + "/api/Model/GetModelListPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetModelListPage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetModelListPage(<any>response_);
                } catch (e) {
                    return <Observable<ModelDTOSearchResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<ModelDTOSearchResult>><any>_observableThrow(response_);
        }));
    }

    protected processGetModelListPage(response: HttpResponseBase): Observable<ModelDTOSearchResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ModelDTOSearchResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ModelDTOSearchResult>(<any>null);
    }

    /**
     * @return Success
     */
    getModel(id: string): Observable<ModelDTO> {
        let url_ = this.baseUrl + "/api/Model/GetModel/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetModel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetModel(<any>response_);
                } catch (e) {
                    return <Observable<ModelDTO>><any>_observableThrow(e);
                }
            } else
                return <Observable<ModelDTO>><any>_observableThrow(response_);
        }));
    }

    protected processGetModel(response: HttpResponseBase): Observable<ModelDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ModelDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ModelDTO>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Created
     */
    createModel(body: CreateModelCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Model/CreateModel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateModel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateModel(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreateModel(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return No Content
     */
    updateModel(body: UpdateModelCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Model/UpdateModel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateModel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateModel(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateModel(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * @return No Content
     */
    deleteModel(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Model/DeleteModel/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteModel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteModel(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteModel(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getParticulariteListPage(body: SearchDTO | undefined): Observable<ParticulariteDTOSearchResult> {
        let url_ = this.baseUrl + "/api/Particularite/GetParticulariteListPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetParticulariteListPage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetParticulariteListPage(<any>response_);
                } catch (e) {
                    return <Observable<ParticulariteDTOSearchResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<ParticulariteDTOSearchResult>><any>_observableThrow(response_);
        }));
    }

    protected processGetParticulariteListPage(response: HttpResponseBase): Observable<ParticulariteDTOSearchResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ParticulariteDTOSearchResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ParticulariteDTOSearchResult>(<any>null);
    }

    /**
     * @return Success
     */
    getParticularite(id: string): Observable<ParticulariteDTO> {
        let url_ = this.baseUrl + "/api/Particularite/GetParticularite/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetParticularite(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetParticularite(<any>response_);
                } catch (e) {
                    return <Observable<ParticulariteDTO>><any>_observableThrow(e);
                }
            } else
                return <Observable<ParticulariteDTO>><any>_observableThrow(response_);
        }));
    }

    protected processGetParticularite(response: HttpResponseBase): Observable<ParticulariteDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ParticulariteDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ParticulariteDTO>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Created
     */
    createParticularite(body: CreateParticulariteCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Particularite/CreateParticularite";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateParticularite(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateParticularite(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreateParticularite(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return No Content
     */
    updateParticularite(body: UpdateParticulariteCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Particularite/UpdateParticularite";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateParticularite(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateParticularite(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateParticularite(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * @return No Content
     */
    deleteParticularite(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Particularite/DeleteParticularite/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteParticularite(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteParticularite(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteParticularite(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getStockListPage(body: SearchDTO | undefined): Observable<StockDTOSearchResult> {
        let url_ = this.baseUrl + "/api/Stock/GetStockListPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetStockListPage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStockListPage(<any>response_);
                } catch (e) {
                    return <Observable<StockDTOSearchResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<StockDTOSearchResult>><any>_observableThrow(response_);
        }));
    }

    protected processGetStockListPage(response: HttpResponseBase): Observable<StockDTOSearchResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StockDTOSearchResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StockDTOSearchResult>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getStateStockListPage(body: SearchDTO | undefined): Observable<StateStockDTOSearchResult> {
        let url_ = this.baseUrl + "/api/Stock/GetStateStockListPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetStateStockListPage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStateStockListPage(<any>response_);
                } catch (e) {
                    return <Observable<StateStockDTOSearchResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<StateStockDTOSearchResult>><any>_observableThrow(response_);
        }));
    }

    protected processGetStateStockListPage(response: HttpResponseBase): Observable<StateStockDTOSearchResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StateStockDTOSearchResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StateStockDTOSearchResult>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Created
     */
    addStock(body: AddStockCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Stock/AddStock";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddStock(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddStock(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processAddStock(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return No Content
     */
    updateStock(body: UpdateStockCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Stock/UpdateStock";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateStock(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateStock(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateStock(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getStockageListPage(body: SearchDTO | undefined): Observable<StockageDTOSearchResult> {
        let url_ = this.baseUrl + "/api/Stockage/GetStockageListPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetStockageListPage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStockageListPage(<any>response_);
                } catch (e) {
                    return <Observable<StockageDTOSearchResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<StockageDTOSearchResult>><any>_observableThrow(response_);
        }));
    }

    protected processGetStockageListPage(response: HttpResponseBase): Observable<StockageDTOSearchResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StockageDTOSearchResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StockageDTOSearchResult>(<any>null);
    }

    /**
     * @return Success
     */
    getStockage(id: string): Observable<StockageDTO> {
        let url_ = this.baseUrl + "/api/Stockage/GetStockage/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetStockage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStockage(<any>response_);
                } catch (e) {
                    return <Observable<StockageDTO>><any>_observableThrow(e);
                }
            } else
                return <Observable<StockageDTO>><any>_observableThrow(response_);
        }));
    }

    protected processGetStockage(response: HttpResponseBase): Observable<StockageDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StockageDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StockageDTO>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Created
     */
    createStockage(body: CreateStockageCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Stockage/CreateStockage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateStockage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateStockage(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreateStockage(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return No Content
     */
    updateStockage(body: UpdateStockageCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Stockage/UpdateStockage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateStockage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateStockage(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateStockage(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * @return No Content
     */
    deleteStockage(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Stockage/DeleteStockage/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteStockage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteStockage(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteStockage(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getTypeListPage(body: SearchDTO | undefined): Observable<TypeDTOSearchResult> {
        let url_ = this.baseUrl + "/api/Type/GetTypeListPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTypeListPage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTypeListPage(<any>response_);
                } catch (e) {
                    return <Observable<TypeDTOSearchResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<TypeDTOSearchResult>><any>_observableThrow(response_);
        }));
    }

    protected processGetTypeListPage(response: HttpResponseBase): Observable<TypeDTOSearchResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TypeDTOSearchResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TypeDTOSearchResult>(<any>null);
    }

    /**
     * @return Success
     */
    getType(id: string): Observable<TypeDTO> {
        let url_ = this.baseUrl + "/api/Type/GetType/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetType(<any>response_);
                } catch (e) {
                    return <Observable<TypeDTO>><any>_observableThrow(e);
                }
            } else
                return <Observable<TypeDTO>><any>_observableThrow(response_);
        }));
    }

    protected processGetType(response: HttpResponseBase): Observable<TypeDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TypeDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TypeDTO>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Created
     */
    createType(body: CreateTypeCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Type/CreateType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateType(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreateType(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return No Content
     */
    updateType(body: UpdateTypeCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Type/UpdateType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateType(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateType(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * @return No Content
     */
    deleteType(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Type/DeleteType/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteType(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteType(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getTypeArticleListPage(body: SearchDTO | undefined): Observable<TypeArticleDTOSearchResult> {
        let url_ = this.baseUrl + "/api/TypeArticle/GetTypeArticleListPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTypeArticleListPage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTypeArticleListPage(<any>response_);
                } catch (e) {
                    return <Observable<TypeArticleDTOSearchResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<TypeArticleDTOSearchResult>><any>_observableThrow(response_);
        }));
    }

    protected processGetTypeArticleListPage(response: HttpResponseBase): Observable<TypeArticleDTOSearchResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TypeArticleDTOSearchResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TypeArticleDTOSearchResult>(<any>null);
    }

    /**
     * @return Success
     */
    getTypeArticle(id: string): Observable<TypeArticleDTO> {
        let url_ = this.baseUrl + "/api/TypeArticle/GetTypeArticle/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTypeArticle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTypeArticle(<any>response_);
                } catch (e) {
                    return <Observable<TypeArticleDTO>><any>_observableThrow(e);
                }
            } else
                return <Observable<TypeArticleDTO>><any>_observableThrow(response_);
        }));
    }

    protected processGetTypeArticle(response: HttpResponseBase): Observable<TypeArticleDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TypeArticleDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TypeArticleDTO>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Created
     */
    createTypeArticle(body: CreateTypeArticleCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/TypeArticle/CreateTypeArticle";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateTypeArticle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateTypeArticle(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreateTypeArticle(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return No Content
     */
    updateTypeArticle(body: UpdateTypeArticleCommand | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/TypeArticle/UpdateTypeArticle";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateTypeArticle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateTypeArticle(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateTypeArticle(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * @return No Content
     */
    deleteTypeArticle(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/TypeArticle/DeleteTypeArticle/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteTypeArticle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteTypeArticle(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteTypeArticle(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getUserListPage(body: SearchDTO | undefined): Observable<UserModelSearchResult> {
        let url_ = this.baseUrl + "/api/User/GetUserListPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserListPage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserListPage(<any>response_);
                } catch (e) {
                    return <Observable<UserModelSearchResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserModelSearchResult>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserListPage(response: HttpResponseBase): Observable<UserModelSearchResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserModelSearchResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserModelSearchResult>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getUser(id: string | undefined): Observable<UserModel> {
        let url_ = this.baseUrl + "/api/User/GetUser?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUser(<any>response_);
                } catch (e) {
                    return <Observable<UserModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserModel>><any>_observableThrow(response_);
        }));
    }

    protected processGetUser(response: HttpResponseBase): Observable<UserModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserModel>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateUser(body: UserModelUpdate | undefined): Observable<UserModelUpdate> {
        let url_ = this.baseUrl + "/api/User/UpdateUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateUser(<any>response_);
                } catch (e) {
                    return <Observable<UserModelUpdate>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserModelUpdate>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateUser(response: HttpResponseBase): Observable<UserModelUpdate> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserModelUpdate.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserModelUpdate>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    deleteUser(id: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/User/DeleteUser?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteUser(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteUser(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @return Success
     */
    getRoleListPage(): Observable<RoleModel[]> {
        let url_ = this.baseUrl + "/api/User/GetRoleListPage";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRoleListPage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRoleListPage(<any>response_);
                } catch (e) {
                    return <Observable<RoleModel[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<RoleModel[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetRoleListPage(response: HttpResponseBase): Observable<RoleModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RoleModel.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return new Observable<RoleModel[]>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createRole(body: CreateRoleModel | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/User/CreateRole";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateRole(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processCreateRole(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * @param roleId (optional) 
     * @return Success
     */
    deleteRole(roleId: string | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/User/DeleteRole?";
        if (roleId === null)
            throw new Error("The parameter 'roleId' cannot be null.");
        else if (roleId !== undefined)
            url_ += "roleId=" + encodeURIComponent("" + roleId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteRole(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteRole(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }
}

export class AddStockCommand implements IAddStockCommand {
    quantite?: number;
    type?: TypeStockage;
    articleId?: string;

    constructor(data?: IAddStockCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.quantite = _data["quantite"];
            this.type = _data["type"];
            this.articleId = _data["articleId"];
        }
    }

    static fromJS(data: any): AddStockCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddStockCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["quantite"] = this.quantite;
        data["type"] = this.type;
        data["articleId"] = this.articleId;
        return data; 
    }
}

export interface IAddStockCommand {
    quantite?: number;
    type?: TypeStockage;
    articleId?: string;
}

export class ArticleDTO implements IArticleDTO {
    id?: string;
    stockageId?: string | undefined;
    stockageName?: string | undefined;
    couleurId?: string | undefined;
    couleurName?: string | undefined;
    nombreDeSim?: number | undefined;
    imei?: string | undefined;
    particulariteId?: string | undefined;
    particulariteContent?: string | undefined;
    etatId?: string | undefined;
    etatContent?: string | undefined;
    processeurs?: string | undefined;
    tailleEcran?: string | undefined;
    ram?: string | undefined;
    qualite?: string | undefined;
    position?: string | undefined;
    description?: string | undefined;
    typeId?: string | undefined;
    typeContent?: string | undefined;
    capacite?: string | undefined;
    caracteristiques?: CaracteristiqueDTO;
    caracteristiqueId?: string | undefined;
    puissance?: string | undefined;
    modele?: string | undefined;
    articleName?: string | undefined;

    constructor(data?: IArticleDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.stockageId = _data["stockageId"];
            this.stockageName = _data["stockageName"];
            this.couleurId = _data["couleurId"];
            this.couleurName = _data["couleurName"];
            this.nombreDeSim = _data["nombreDeSim"];
            this.imei = _data["imei"];
            this.particulariteId = _data["particulariteId"];
            this.particulariteContent = _data["particulariteContent"];
            this.etatId = _data["etatId"];
            this.etatContent = _data["etatContent"];
            this.processeurs = _data["processeurs"];
            this.tailleEcran = _data["tailleEcran"];
            this.ram = _data["ram"];
            this.qualite = _data["qualite"];
            this.position = _data["position"];
            this.description = _data["description"];
            this.typeId = _data["typeId"];
            this.typeContent = _data["typeContent"];
            this.capacite = _data["capacite"];
            this.caracteristiques = _data["caracteristiques"] ? CaracteristiqueDTO.fromJS(_data["caracteristiques"]) : <any>undefined;
            this.caracteristiqueId = _data["caracteristiqueId"];
            this.puissance = _data["puissance"];
            this.modele = _data["modele"];
            this.articleName = _data["articleName"];
        }
    }

    static fromJS(data: any): ArticleDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ArticleDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["stockageId"] = this.stockageId;
        data["stockageName"] = this.stockageName;
        data["couleurId"] = this.couleurId;
        data["couleurName"] = this.couleurName;
        data["nombreDeSim"] = this.nombreDeSim;
        data["imei"] = this.imei;
        data["particulariteId"] = this.particulariteId;
        data["particulariteContent"] = this.particulariteContent;
        data["etatId"] = this.etatId;
        data["etatContent"] = this.etatContent;
        data["processeurs"] = this.processeurs;
        data["tailleEcran"] = this.tailleEcran;
        data["ram"] = this.ram;
        data["qualite"] = this.qualite;
        data["position"] = this.position;
        data["description"] = this.description;
        data["typeId"] = this.typeId;
        data["typeContent"] = this.typeContent;
        data["capacite"] = this.capacite;
        data["caracteristiques"] = this.caracteristiques ? this.caracteristiques.toJSON() : <any>undefined;
        data["caracteristiqueId"] = this.caracteristiqueId;
        data["puissance"] = this.puissance;
        data["modele"] = this.modele;
        data["articleName"] = this.articleName;
        return data; 
    }
}

export interface IArticleDTO {
    id?: string;
    stockageId?: string | undefined;
    stockageName?: string | undefined;
    couleurId?: string | undefined;
    couleurName?: string | undefined;
    nombreDeSim?: number | undefined;
    imei?: string | undefined;
    particulariteId?: string | undefined;
    particulariteContent?: string | undefined;
    etatId?: string | undefined;
    etatContent?: string | undefined;
    processeurs?: string | undefined;
    tailleEcran?: string | undefined;
    ram?: string | undefined;
    qualite?: string | undefined;
    position?: string | undefined;
    description?: string | undefined;
    typeId?: string | undefined;
    typeContent?: string | undefined;
    capacite?: string | undefined;
    caracteristiques?: CaracteristiqueDTO;
    caracteristiqueId?: string | undefined;
    puissance?: string | undefined;
    modele?: string | undefined;
    articleName?: string | undefined;
}

export class ArticleDTOSearchResult implements IArticleDTOSearchResult {
    results?: ArticleDTO[] | undefined;
    totalCount?: number;
    countPerPage?: number;
    page?: number;

    constructor(data?: IArticleDTOSearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(ArticleDTO.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.countPerPage = _data["countPerPage"];
            this.page = _data["page"];
        }
    }

    static fromJS(data: any): ArticleDTOSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new ArticleDTOSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["countPerPage"] = this.countPerPage;
        data["page"] = this.page;
        return data; 
    }
}

export interface IArticleDTOSearchResult {
    results?: ArticleDTO[] | undefined;
    totalCount?: number;
    countPerPage?: number;
    page?: number;
}

export class CaracteristiqueDTO implements ICaracteristiqueDTO {
    id?: string;
    hasStockage?: boolean;
    hasCouleur?: boolean;
    hasNombreDeSim?: boolean;
    hasImei?: boolean;
    hasParticularite?: boolean;
    hasEtat?: boolean;
    hasProcesseurs?: boolean;
    hasTailleEcran?: boolean;
    hasRam?: boolean;
    hasQualite?: boolean;
    hasType?: boolean;
    hasCapacite?: boolean;
    hasPuissance?: boolean;
    hasPosition?: boolean;
    hasDescription?: boolean;
    modelId?: string;
    modelName?: string | undefined;

    constructor(data?: ICaracteristiqueDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.hasStockage = _data["hasStockage"];
            this.hasCouleur = _data["hasCouleur"];
            this.hasNombreDeSim = _data["hasNombreDeSim"];
            this.hasImei = _data["hasImei"];
            this.hasParticularite = _data["hasParticularite"];
            this.hasEtat = _data["hasEtat"];
            this.hasProcesseurs = _data["hasProcesseurs"];
            this.hasTailleEcran = _data["hasTailleEcran"];
            this.hasRam = _data["hasRam"];
            this.hasQualite = _data["hasQualite"];
            this.hasType = _data["hasType"];
            this.hasCapacite = _data["hasCapacite"];
            this.hasPuissance = _data["hasPuissance"];
            this.hasPosition = _data["hasPosition"];
            this.hasDescription = _data["hasDescription"];
            this.modelId = _data["modelId"];
            this.modelName = _data["modelName"];
        }
    }

    static fromJS(data: any): CaracteristiqueDTO {
        data = typeof data === 'object' ? data : {};
        let result = new CaracteristiqueDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["hasStockage"] = this.hasStockage;
        data["hasCouleur"] = this.hasCouleur;
        data["hasNombreDeSim"] = this.hasNombreDeSim;
        data["hasImei"] = this.hasImei;
        data["hasParticularite"] = this.hasParticularite;
        data["hasEtat"] = this.hasEtat;
        data["hasProcesseurs"] = this.hasProcesseurs;
        data["hasTailleEcran"] = this.hasTailleEcran;
        data["hasRam"] = this.hasRam;
        data["hasQualite"] = this.hasQualite;
        data["hasType"] = this.hasType;
        data["hasCapacite"] = this.hasCapacite;
        data["hasPuissance"] = this.hasPuissance;
        data["hasPosition"] = this.hasPosition;
        data["hasDescription"] = this.hasDescription;
        data["modelId"] = this.modelId;
        data["modelName"] = this.modelName;
        return data; 
    }
}

export interface ICaracteristiqueDTO {
    id?: string;
    hasStockage?: boolean;
    hasCouleur?: boolean;
    hasNombreDeSim?: boolean;
    hasImei?: boolean;
    hasParticularite?: boolean;
    hasEtat?: boolean;
    hasProcesseurs?: boolean;
    hasTailleEcran?: boolean;
    hasRam?: boolean;
    hasQualite?: boolean;
    hasType?: boolean;
    hasCapacite?: boolean;
    hasPuissance?: boolean;
    hasPosition?: boolean;
    hasDescription?: boolean;
    modelId?: string;
    modelName?: string | undefined;
}

export class CaracteristiqueDTOSearchResult implements ICaracteristiqueDTOSearchResult {
    results?: CaracteristiqueDTO[] | undefined;
    totalCount?: number;
    countPerPage?: number;
    page?: number;

    constructor(data?: ICaracteristiqueDTOSearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(CaracteristiqueDTO.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.countPerPage = _data["countPerPage"];
            this.page = _data["page"];
        }
    }

    static fromJS(data: any): CaracteristiqueDTOSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new CaracteristiqueDTOSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["countPerPage"] = this.countPerPage;
        data["page"] = this.page;
        return data; 
    }
}

export interface ICaracteristiqueDTOSearchResult {
    results?: CaracteristiqueDTO[] | undefined;
    totalCount?: number;
    countPerPage?: number;
    page?: number;
}

export class ClientDto implements IClientDto {
    id?: string;
    identifiant?: string | undefined;
    name?: string | undefined;
    lastName?: string | undefined;
    phoneNumber?: string | undefined;
    whatsappNumber?: string | undefined;
    adress?: string | undefined;
    isClientEnGros?: boolean;

    constructor(data?: IClientDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.identifiant = _data["identifiant"];
            this.name = _data["name"];
            this.lastName = _data["lastName"];
            this.phoneNumber = _data["phoneNumber"];
            this.whatsappNumber = _data["whatsappNumber"];
            this.adress = _data["adress"];
            this.isClientEnGros = _data["isClientEnGros"];
        }
    }

    static fromJS(data: any): ClientDto {
        data = typeof data === 'object' ? data : {};
        let result = new ClientDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["identifiant"] = this.identifiant;
        data["name"] = this.name;
        data["lastName"] = this.lastName;
        data["phoneNumber"] = this.phoneNumber;
        data["whatsappNumber"] = this.whatsappNumber;
        data["adress"] = this.adress;
        data["isClientEnGros"] = this.isClientEnGros;
        return data; 
    }
}

export interface IClientDto {
    id?: string;
    identifiant?: string | undefined;
    name?: string | undefined;
    lastName?: string | undefined;
    phoneNumber?: string | undefined;
    whatsappNumber?: string | undefined;
    adress?: string | undefined;
    isClientEnGros?: boolean;
}

export class ClientDtoSearchResult implements IClientDtoSearchResult {
    results?: ClientDto[] | undefined;
    totalCount?: number;
    countPerPage?: number;
    page?: number;

    constructor(data?: IClientDtoSearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(ClientDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.countPerPage = _data["countPerPage"];
            this.page = _data["page"];
        }
    }

    static fromJS(data: any): ClientDtoSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new ClientDtoSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["countPerPage"] = this.countPerPage;
        data["page"] = this.page;
        return data; 
    }
}

export interface IClientDtoSearchResult {
    results?: ClientDto[] | undefined;
    totalCount?: number;
    countPerPage?: number;
    page?: number;
}

export class CouleurDTO implements ICouleurDTO {
    id?: string;
    name?: string | undefined;
    codeCouleur?: string | undefined;

    constructor(data?: ICouleurDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.codeCouleur = _data["codeCouleur"];
        }
    }

    static fromJS(data: any): CouleurDTO {
        data = typeof data === 'object' ? data : {};
        let result = new CouleurDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["codeCouleur"] = this.codeCouleur;
        return data; 
    }
}

export interface ICouleurDTO {
    id?: string;
    name?: string | undefined;
    codeCouleur?: string | undefined;
}

export class CouleurDTOSearchResult implements ICouleurDTOSearchResult {
    results?: CouleurDTO[] | undefined;
    totalCount?: number;
    countPerPage?: number;
    page?: number;

    constructor(data?: ICouleurDTOSearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(CouleurDTO.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.countPerPage = _data["countPerPage"];
            this.page = _data["page"];
        }
    }

    static fromJS(data: any): CouleurDTOSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new CouleurDTOSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["countPerPage"] = this.countPerPage;
        data["page"] = this.page;
        return data; 
    }
}

export interface ICouleurDTOSearchResult {
    results?: CouleurDTO[] | undefined;
    totalCount?: number;
    countPerPage?: number;
    page?: number;
}

export class CreateArticleCommand implements ICreateArticleCommand {
    stockageId?: string | undefined;
    couleurId?: string | undefined;
    nombreDeSim?: number | undefined;
    imei?: string | undefined;
    particulariteId?: string | undefined;
    etatId?: string | undefined;
    processeurs?: string | undefined;
    tailleEcran?: string | undefined;
    ram?: string | undefined;
    qualite?: string | undefined;
    typeId?: string | undefined;
    capacite?: string | undefined;
    caracteristiqueId?: string;
    puissance?: string | undefined;
    description?: string | undefined;
    position?: string | undefined;

    constructor(data?: ICreateArticleCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.stockageId = _data["stockageId"];
            this.couleurId = _data["couleurId"];
            this.nombreDeSim = _data["nombreDeSim"];
            this.imei = _data["imei"];
            this.particulariteId = _data["particulariteId"];
            this.etatId = _data["etatId"];
            this.processeurs = _data["processeurs"];
            this.tailleEcran = _data["tailleEcran"];
            this.ram = _data["ram"];
            this.qualite = _data["qualite"];
            this.typeId = _data["typeId"];
            this.capacite = _data["capacite"];
            this.caracteristiqueId = _data["caracteristiqueId"];
            this.puissance = _data["puissance"];
            this.description = _data["description"];
            this.position = _data["position"];
        }
    }

    static fromJS(data: any): CreateArticleCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateArticleCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["stockageId"] = this.stockageId;
        data["couleurId"] = this.couleurId;
        data["nombreDeSim"] = this.nombreDeSim;
        data["imei"] = this.imei;
        data["particulariteId"] = this.particulariteId;
        data["etatId"] = this.etatId;
        data["processeurs"] = this.processeurs;
        data["tailleEcran"] = this.tailleEcran;
        data["ram"] = this.ram;
        data["qualite"] = this.qualite;
        data["typeId"] = this.typeId;
        data["capacite"] = this.capacite;
        data["caracteristiqueId"] = this.caracteristiqueId;
        data["puissance"] = this.puissance;
        data["description"] = this.description;
        data["position"] = this.position;
        return data; 
    }
}

export interface ICreateArticleCommand {
    stockageId?: string | undefined;
    couleurId?: string | undefined;
    nombreDeSim?: number | undefined;
    imei?: string | undefined;
    particulariteId?: string | undefined;
    etatId?: string | undefined;
    processeurs?: string | undefined;
    tailleEcran?: string | undefined;
    ram?: string | undefined;
    qualite?: string | undefined;
    typeId?: string | undefined;
    capacite?: string | undefined;
    caracteristiqueId?: string;
    puissance?: string | undefined;
    description?: string | undefined;
    position?: string | undefined;
}

export class CreateCaracteristiqueCommand implements ICreateCaracteristiqueCommand {
    hasStockage?: boolean;
    hasCouleur?: boolean;
    hasNombreDeSim?: boolean;
    hasImei?: boolean;
    hasParticularite?: boolean;
    hasEtat?: boolean;
    hasProcesseurs?: boolean;
    hasTailleEcran?: boolean;
    hasRam?: boolean;
    hasQualite?: boolean;
    hasType?: boolean;
    hasCapacite?: boolean;
    hasCaracteristic?: boolean;
    hasPuissance?: boolean;
    hasPosition?: boolean;
    hasDescription?: boolean;
    modelId?: string;

    constructor(data?: ICreateCaracteristiqueCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hasStockage = _data["hasStockage"];
            this.hasCouleur = _data["hasCouleur"];
            this.hasNombreDeSim = _data["hasNombreDeSim"];
            this.hasImei = _data["hasImei"];
            this.hasParticularite = _data["hasParticularite"];
            this.hasEtat = _data["hasEtat"];
            this.hasProcesseurs = _data["hasProcesseurs"];
            this.hasTailleEcran = _data["hasTailleEcran"];
            this.hasRam = _data["hasRam"];
            this.hasQualite = _data["hasQualite"];
            this.hasType = _data["hasType"];
            this.hasCapacite = _data["hasCapacite"];
            this.hasCaracteristic = _data["hasCaracteristic"];
            this.hasPuissance = _data["hasPuissance"];
            this.hasPosition = _data["hasPosition"];
            this.hasDescription = _data["hasDescription"];
            this.modelId = _data["modelId"];
        }
    }

    static fromJS(data: any): CreateCaracteristiqueCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCaracteristiqueCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hasStockage"] = this.hasStockage;
        data["hasCouleur"] = this.hasCouleur;
        data["hasNombreDeSim"] = this.hasNombreDeSim;
        data["hasImei"] = this.hasImei;
        data["hasParticularite"] = this.hasParticularite;
        data["hasEtat"] = this.hasEtat;
        data["hasProcesseurs"] = this.hasProcesseurs;
        data["hasTailleEcran"] = this.hasTailleEcran;
        data["hasRam"] = this.hasRam;
        data["hasQualite"] = this.hasQualite;
        data["hasType"] = this.hasType;
        data["hasCapacite"] = this.hasCapacite;
        data["hasCaracteristic"] = this.hasCaracteristic;
        data["hasPuissance"] = this.hasPuissance;
        data["hasPosition"] = this.hasPosition;
        data["hasDescription"] = this.hasDescription;
        data["modelId"] = this.modelId;
        return data; 
    }
}

export interface ICreateCaracteristiqueCommand {
    hasStockage?: boolean;
    hasCouleur?: boolean;
    hasNombreDeSim?: boolean;
    hasImei?: boolean;
    hasParticularite?: boolean;
    hasEtat?: boolean;
    hasProcesseurs?: boolean;
    hasTailleEcran?: boolean;
    hasRam?: boolean;
    hasQualite?: boolean;
    hasType?: boolean;
    hasCapacite?: boolean;
    hasCaracteristic?: boolean;
    hasPuissance?: boolean;
    hasPosition?: boolean;
    hasDescription?: boolean;
    modelId?: string;
}

export class CreateClientCommand implements ICreateClientCommand {
    name?: string | undefined;
    lastName?: string | undefined;
    phoneNumber?: string | undefined;
    whatsappNumber?: string | undefined;
    adress?: string | undefined;
    isClientEnGros?: boolean;

    constructor(data?: ICreateClientCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.lastName = _data["lastName"];
            this.phoneNumber = _data["phoneNumber"];
            this.whatsappNumber = _data["whatsappNumber"];
            this.adress = _data["adress"];
            this.isClientEnGros = _data["isClientEnGros"];
        }
    }

    static fromJS(data: any): CreateClientCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateClientCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["lastName"] = this.lastName;
        data["phoneNumber"] = this.phoneNumber;
        data["whatsappNumber"] = this.whatsappNumber;
        data["adress"] = this.adress;
        data["isClientEnGros"] = this.isClientEnGros;
        return data; 
    }
}

export interface ICreateClientCommand {
    name?: string | undefined;
    lastName?: string | undefined;
    phoneNumber?: string | undefined;
    whatsappNumber?: string | undefined;
    adress?: string | undefined;
    isClientEnGros?: boolean;
}

export class CreateCouleurCommand implements ICreateCouleurCommand {
    name?: string | undefined;
    codeCouleur?: string | undefined;

    constructor(data?: ICreateCouleurCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.codeCouleur = _data["codeCouleur"];
        }
    }

    static fromJS(data: any): CreateCouleurCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCouleurCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["codeCouleur"] = this.codeCouleur;
        return data; 
    }
}

export interface ICreateCouleurCommand {
    name?: string | undefined;
    codeCouleur?: string | undefined;
}

export class CreateEtatCommand implements ICreateEtatCommand {
    content?: string | undefined;

    constructor(data?: ICreateEtatCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.content = _data["content"];
        }
    }

    static fromJS(data: any): CreateEtatCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateEtatCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["content"] = this.content;
        return data; 
    }
}

export interface ICreateEtatCommand {
    content?: string | undefined;
}

export class CreateFournisseurCommand implements ICreateFournisseurCommand {
    name?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    whatsappNumber?: string | undefined;

    constructor(data?: ICreateFournisseurCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.whatsappNumber = _data["whatsappNumber"];
        }
    }

    static fromJS(data: any): CreateFournisseurCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateFournisseurCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["whatsappNumber"] = this.whatsappNumber;
        return data; 
    }
}

export interface ICreateFournisseurCommand {
    name?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    whatsappNumber?: string | undefined;
}

export class CreateMarqueCommand implements ICreateMarqueCommand {
    name?: string | undefined;
    typeArticleId?: string;

    constructor(data?: ICreateMarqueCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.typeArticleId = _data["typeArticleId"];
        }
    }

    static fromJS(data: any): CreateMarqueCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateMarqueCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["typeArticleId"] = this.typeArticleId;
        return data; 
    }
}

export interface ICreateMarqueCommand {
    name?: string | undefined;
    typeArticleId?: string;
}

export class CreateModelCommand implements ICreateModelCommand {
    name?: string | undefined;
    marqueId?: string;

    constructor(data?: ICreateModelCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.marqueId = _data["marqueId"];
        }
    }

    static fromJS(data: any): CreateModelCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateModelCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["marqueId"] = this.marqueId;
        return data; 
    }
}

export interface ICreateModelCommand {
    name?: string | undefined;
    marqueId?: string;
}

export class CreateParticulariteCommand implements ICreateParticulariteCommand {
    content?: string | undefined;

    constructor(data?: ICreateParticulariteCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.content = _data["content"];
        }
    }

    static fromJS(data: any): CreateParticulariteCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateParticulariteCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["content"] = this.content;
        return data; 
    }
}

export interface ICreateParticulariteCommand {
    content?: string | undefined;
}

export class CreateRoleModel implements ICreateRoleModel {
    name?: string | undefined;
    normalizedName?: string | undefined;
    concurrencyStamp?: string | undefined;

    constructor(data?: ICreateRoleModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.normalizedName = _data["normalizedName"];
            this.concurrencyStamp = _data["concurrencyStamp"];
        }
    }

    static fromJS(data: any): CreateRoleModel {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRoleModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["normalizedName"] = this.normalizedName;
        data["concurrencyStamp"] = this.concurrencyStamp;
        return data; 
    }
}

export interface ICreateRoleModel {
    name?: string | undefined;
    normalizedName?: string | undefined;
    concurrencyStamp?: string | undefined;
}

export class CreateStockageCommand implements ICreateStockageCommand {
    name?: string | undefined;

    constructor(data?: ICreateStockageCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CreateStockageCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateStockageCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data; 
    }
}

export interface ICreateStockageCommand {
    name?: string | undefined;
}

export class CreateTypeArticleCommand implements ICreateTypeArticleCommand {
    name?: string | undefined;

    constructor(data?: ICreateTypeArticleCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CreateTypeArticleCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTypeArticleCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data; 
    }
}

export interface ICreateTypeArticleCommand {
    name?: string | undefined;
}

export class CreateTypeCommand implements ICreateTypeCommand {
    content?: string | undefined;

    constructor(data?: ICreateTypeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.content = _data["content"];
        }
    }

    static fromJS(data: any): CreateTypeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTypeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["content"] = this.content;
        return data; 
    }
}

export interface ICreateTypeCommand {
    content?: string | undefined;
}

export class EtatDTO implements IEtatDTO {
    id?: string;
    content?: string | undefined;

    constructor(data?: IEtatDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.content = _data["content"];
        }
    }

    static fromJS(data: any): EtatDTO {
        data = typeof data === 'object' ? data : {};
        let result = new EtatDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["content"] = this.content;
        return data; 
    }
}

export interface IEtatDTO {
    id?: string;
    content?: string | undefined;
}

export class EtatDTOSearchResult implements IEtatDTOSearchResult {
    results?: EtatDTO[] | undefined;
    totalCount?: number;
    countPerPage?: number;
    page?: number;

    constructor(data?: IEtatDTOSearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(EtatDTO.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.countPerPage = _data["countPerPage"];
            this.page = _data["page"];
        }
    }

    static fromJS(data: any): EtatDTOSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new EtatDTOSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["countPerPage"] = this.countPerPage;
        data["page"] = this.page;
        return data; 
    }
}

export interface IEtatDTOSearchResult {
    results?: EtatDTO[] | undefined;
    totalCount?: number;
    countPerPage?: number;
    page?: number;
}

export class FournisseurDto implements IFournisseurDto {
    id?: string;
    name?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    whatsappNumber?: string | undefined;
    identifiant?: string | undefined;

    constructor(data?: IFournisseurDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.whatsappNumber = _data["whatsappNumber"];
            this.identifiant = _data["identifiant"];
        }
    }

    static fromJS(data: any): FournisseurDto {
        data = typeof data === 'object' ? data : {};
        let result = new FournisseurDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["whatsappNumber"] = this.whatsappNumber;
        data["identifiant"] = this.identifiant;
        return data; 
    }
}

export interface IFournisseurDto {
    id?: string;
    name?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    whatsappNumber?: string | undefined;
    identifiant?: string | undefined;
}

export class FournisseurDtoSearchResult implements IFournisseurDtoSearchResult {
    results?: FournisseurDto[] | undefined;
    totalCount?: number;
    countPerPage?: number;
    page?: number;

    constructor(data?: IFournisseurDtoSearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(FournisseurDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.countPerPage = _data["countPerPage"];
            this.page = _data["page"];
        }
    }

    static fromJS(data: any): FournisseurDtoSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new FournisseurDtoSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["countPerPage"] = this.countPerPage;
        data["page"] = this.page;
        return data; 
    }
}

export interface IFournisseurDtoSearchResult {
    results?: FournisseurDto[] | undefined;
    totalCount?: number;
    countPerPage?: number;
    page?: number;
}

export class MarqueDTO implements IMarqueDTO {
    id?: string;
    name?: string | undefined;
    typeArticleName?: string | undefined;
    typeArticleId?: string;

    constructor(data?: IMarqueDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.typeArticleName = _data["typeArticleName"];
            this.typeArticleId = _data["typeArticleId"];
        }
    }

    static fromJS(data: any): MarqueDTO {
        data = typeof data === 'object' ? data : {};
        let result = new MarqueDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["typeArticleName"] = this.typeArticleName;
        data["typeArticleId"] = this.typeArticleId;
        return data; 
    }
}

export interface IMarqueDTO {
    id?: string;
    name?: string | undefined;
    typeArticleName?: string | undefined;
    typeArticleId?: string;
}

export class MarqueDTOSearchResult implements IMarqueDTOSearchResult {
    results?: MarqueDTO[] | undefined;
    totalCount?: number;
    countPerPage?: number;
    page?: number;

    constructor(data?: IMarqueDTOSearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(MarqueDTO.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.countPerPage = _data["countPerPage"];
            this.page = _data["page"];
        }
    }

    static fromJS(data: any): MarqueDTOSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new MarqueDTOSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["countPerPage"] = this.countPerPage;
        data["page"] = this.page;
        return data; 
    }
}

export interface IMarqueDTOSearchResult {
    results?: MarqueDTO[] | undefined;
    totalCount?: number;
    countPerPage?: number;
    page?: number;
}

export class ModelDTO implements IModelDTO {
    id?: string;
    marqueId?: string;
    name?: string | undefined;
    marqueName?: string | undefined;

    constructor(data?: IModelDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.marqueId = _data["marqueId"];
            this.name = _data["name"];
            this.marqueName = _data["marqueName"];
        }
    }

    static fromJS(data: any): ModelDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ModelDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["marqueId"] = this.marqueId;
        data["name"] = this.name;
        data["marqueName"] = this.marqueName;
        return data; 
    }
}

export interface IModelDTO {
    id?: string;
    marqueId?: string;
    name?: string | undefined;
    marqueName?: string | undefined;
}

export class ModelDTOSearchResult implements IModelDTOSearchResult {
    results?: ModelDTO[] | undefined;
    totalCount?: number;
    countPerPage?: number;
    page?: number;

    constructor(data?: IModelDTOSearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(ModelDTO.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.countPerPage = _data["countPerPage"];
            this.page = _data["page"];
        }
    }

    static fromJS(data: any): ModelDTOSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new ModelDTOSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["countPerPage"] = this.countPerPage;
        data["page"] = this.page;
        return data; 
    }
}

export interface IModelDTOSearchResult {
    results?: ModelDTO[] | undefined;
    totalCount?: number;
    countPerPage?: number;
    page?: number;
}

export class ParticulariteDTO implements IParticulariteDTO {
    id?: string;
    content?: string | undefined;

    constructor(data?: IParticulariteDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.content = _data["content"];
        }
    }

    static fromJS(data: any): ParticulariteDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ParticulariteDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["content"] = this.content;
        return data; 
    }
}

export interface IParticulariteDTO {
    id?: string;
    content?: string | undefined;
}

export class ParticulariteDTOSearchResult implements IParticulariteDTOSearchResult {
    results?: ParticulariteDTO[] | undefined;
    totalCount?: number;
    countPerPage?: number;
    page?: number;

    constructor(data?: IParticulariteDTOSearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(ParticulariteDTO.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.countPerPage = _data["countPerPage"];
            this.page = _data["page"];
        }
    }

    static fromJS(data: any): ParticulariteDTOSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new ParticulariteDTOSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["countPerPage"] = this.countPerPage;
        data["page"] = this.page;
        return data; 
    }
}

export interface IParticulariteDTOSearchResult {
    results?: ParticulariteDTO[] | undefined;
    totalCount?: number;
    countPerPage?: number;
    page?: number;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data; 
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
}

export class RoleInfo implements IRoleInfo {
    name?: string | undefined;
    normalizedName?: string | undefined;

    constructor(data?: IRoleInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.normalizedName = _data["normalizedName"];
        }
    }

    static fromJS(data: any): RoleInfo {
        data = typeof data === 'object' ? data : {};
        let result = new RoleInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["normalizedName"] = this.normalizedName;
        return data; 
    }
}

export interface IRoleInfo {
    name?: string | undefined;
    normalizedName?: string | undefined;
}

export class RoleModel implements IRoleModel {
    id?: string | undefined;
    name?: string | undefined;
    normalizedName?: string | undefined;
    concurrencyStamp?: string | undefined;

    constructor(data?: IRoleModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.normalizedName = _data["normalizedName"];
            this.concurrencyStamp = _data["concurrencyStamp"];
        }
    }

    static fromJS(data: any): RoleModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoleModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["normalizedName"] = this.normalizedName;
        data["concurrencyStamp"] = this.concurrencyStamp;
        return data; 
    }
}

export interface IRoleModel {
    id?: string | undefined;
    name?: string | undefined;
    normalizedName?: string | undefined;
    concurrencyStamp?: string | undefined;
}

export class SearchDTO implements ISearchDTO {
    pageIndex?: number;
    pageSize?: number;
    filters?: { [key: string]: string; } | undefined;

    constructor(data?: ISearchDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageIndex = _data["pageIndex"];
            this.pageSize = _data["pageSize"];
            if (_data["filters"]) {
                this.filters = {} as any;
                for (let key in _data["filters"]) {
                    if (_data["filters"].hasOwnProperty(key))
                        this.filters![key] = _data["filters"][key];
                }
            }
        }
    }

    static fromJS(data: any): SearchDTO {
        data = typeof data === 'object' ? data : {};
        let result = new SearchDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageIndex"] = this.pageIndex;
        data["pageSize"] = this.pageSize;
        if (this.filters) {
            data["filters"] = {};
            for (let key in this.filters) {
                if (this.filters.hasOwnProperty(key))
                    data["filters"][key] = this.filters[key];
            }
        }
        return data; 
    }
}

export interface ISearchDTO {
    pageIndex?: number;
    pageSize?: number;
    filters?: { [key: string]: string; } | undefined;
}

export class StateStockDTO implements IStateStockDTO {
    id?: string;
    articleName?: string | undefined;
    quantiteRestante?: number;

    constructor(data?: IStateStockDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.articleName = _data["articleName"];
            this.quantiteRestante = _data["quantiteRestante"];
        }
    }

    static fromJS(data: any): StateStockDTO {
        data = typeof data === 'object' ? data : {};
        let result = new StateStockDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["articleName"] = this.articleName;
        data["quantiteRestante"] = this.quantiteRestante;
        return data; 
    }
}

export interface IStateStockDTO {
    id?: string;
    articleName?: string | undefined;
    quantiteRestante?: number;
}

export class StateStockDTOSearchResult implements IStateStockDTOSearchResult {
    results?: StateStockDTO[] | undefined;
    totalCount?: number;
    countPerPage?: number;
    page?: number;

    constructor(data?: IStateStockDTOSearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(StateStockDTO.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.countPerPage = _data["countPerPage"];
            this.page = _data["page"];
        }
    }

    static fromJS(data: any): StateStockDTOSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new StateStockDTOSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["countPerPage"] = this.countPerPage;
        data["page"] = this.page;
        return data; 
    }
}

export interface IStateStockDTOSearchResult {
    results?: StateStockDTO[] | undefined;
    totalCount?: number;
    countPerPage?: number;
    page?: number;
}

export class StockDTO implements IStockDTO {
    id?: string;
    quantite?: number;
    typeName?: string | undefined;
    statusName?: string | undefined;
    articleName?: string | undefined;
    type?: TypeStockage;
    articleId?: string;
    article?: ArticleDTO;
    creationDate?: Date | undefined;

    constructor(data?: IStockDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.quantite = _data["quantite"];
            this.typeName = _data["typeName"];
            this.statusName = _data["statusName"];
            this.articleName = _data["articleName"];
            this.type = _data["type"];
            this.articleId = _data["articleId"];
            this.article = _data["article"] ? ArticleDTO.fromJS(_data["article"]) : <any>undefined;
            this.creationDate = _data["creationDate"] ? new Date(_data["creationDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): StockDTO {
        data = typeof data === 'object' ? data : {};
        let result = new StockDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["quantite"] = this.quantite;
        data["typeName"] = this.typeName;
        data["statusName"] = this.statusName;
        data["articleName"] = this.articleName;
        data["type"] = this.type;
        data["articleId"] = this.articleId;
        data["article"] = this.article ? this.article.toJSON() : <any>undefined;
        data["creationDate"] = this.creationDate ? this.creationDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IStockDTO {
    id?: string;
    quantite?: number;
    typeName?: string | undefined;
    statusName?: string | undefined;
    articleName?: string | undefined;
    type?: TypeStockage;
    articleId?: string;
    article?: ArticleDTO;
    creationDate?: Date | undefined;
}

export class StockDTOSearchResult implements IStockDTOSearchResult {
    results?: StockDTO[] | undefined;
    totalCount?: number;
    countPerPage?: number;
    page?: number;

    constructor(data?: IStockDTOSearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(StockDTO.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.countPerPage = _data["countPerPage"];
            this.page = _data["page"];
        }
    }

    static fromJS(data: any): StockDTOSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new StockDTOSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["countPerPage"] = this.countPerPage;
        data["page"] = this.page;
        return data; 
    }
}

export interface IStockDTOSearchResult {
    results?: StockDTO[] | undefined;
    totalCount?: number;
    countPerPage?: number;
    page?: number;
}

export class StockageDTO implements IStockageDTO {
    id?: string;
    name?: string | undefined;

    constructor(data?: IStockageDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): StockageDTO {
        data = typeof data === 'object' ? data : {};
        let result = new StockageDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IStockageDTO {
    id?: string;
    name?: string | undefined;
}

export class StockageDTOSearchResult implements IStockageDTOSearchResult {
    results?: StockageDTO[] | undefined;
    totalCount?: number;
    countPerPage?: number;
    page?: number;

    constructor(data?: IStockageDTOSearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(StockageDTO.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.countPerPage = _data["countPerPage"];
            this.page = _data["page"];
        }
    }

    static fromJS(data: any): StockageDTOSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new StockageDTOSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["countPerPage"] = this.countPerPage;
        data["page"] = this.page;
        return data; 
    }
}

export interface IStockageDTOSearchResult {
    results?: StockageDTO[] | undefined;
    totalCount?: number;
    countPerPage?: number;
    page?: number;
}

export class TypeArticleDTO implements ITypeArticleDTO {
    id?: string;
    name?: string | undefined;

    constructor(data?: ITypeArticleDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): TypeArticleDTO {
        data = typeof data === 'object' ? data : {};
        let result = new TypeArticleDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface ITypeArticleDTO {
    id?: string;
    name?: string | undefined;
}

export class TypeArticleDTOSearchResult implements ITypeArticleDTOSearchResult {
    results?: TypeArticleDTO[] | undefined;
    totalCount?: number;
    countPerPage?: number;
    page?: number;

    constructor(data?: ITypeArticleDTOSearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(TypeArticleDTO.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.countPerPage = _data["countPerPage"];
            this.page = _data["page"];
        }
    }

    static fromJS(data: any): TypeArticleDTOSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new TypeArticleDTOSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["countPerPage"] = this.countPerPage;
        data["page"] = this.page;
        return data; 
    }
}

export interface ITypeArticleDTOSearchResult {
    results?: TypeArticleDTO[] | undefined;
    totalCount?: number;
    countPerPage?: number;
    page?: number;
}

export class TypeDTO implements ITypeDTO {
    id?: string;
    content?: string | undefined;

    constructor(data?: ITypeDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.content = _data["content"];
        }
    }

    static fromJS(data: any): TypeDTO {
        data = typeof data === 'object' ? data : {};
        let result = new TypeDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["content"] = this.content;
        return data; 
    }
}

export interface ITypeDTO {
    id?: string;
    content?: string | undefined;
}

export class TypeDTOSearchResult implements ITypeDTOSearchResult {
    results?: TypeDTO[] | undefined;
    totalCount?: number;
    countPerPage?: number;
    page?: number;

    constructor(data?: ITypeDTOSearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(TypeDTO.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.countPerPage = _data["countPerPage"];
            this.page = _data["page"];
        }
    }

    static fromJS(data: any): TypeDTOSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new TypeDTOSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["countPerPage"] = this.countPerPage;
        data["page"] = this.page;
        return data; 
    }
}

export interface ITypeDTOSearchResult {
    results?: TypeDTO[] | undefined;
    totalCount?: number;
    countPerPage?: number;
    page?: number;
}

export enum TypeStockage {
    _1 = 1,
    _2 = 2,
}

export class UpdateArticleCommand implements IUpdateArticleCommand {
    id?: string;
    stockageId?: string | undefined;
    couleurId?: string | undefined;
    nombreDeSim?: number | undefined;
    imei?: string | undefined;
    particulariteId?: string | undefined;
    etatId?: string | undefined;
    processeurs?: string | undefined;
    tailleEcran?: string | undefined;
    ram?: string | undefined;
    qualite?: string | undefined;
    position?: string | undefined;
    typeId?: string | undefined;
    capacite?: string | undefined;
    caracteristiqueId?: string;
    puissance?: string | undefined;
    description?: string | undefined;

    constructor(data?: IUpdateArticleCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.stockageId = _data["stockageId"];
            this.couleurId = _data["couleurId"];
            this.nombreDeSim = _data["nombreDeSim"];
            this.imei = _data["imei"];
            this.particulariteId = _data["particulariteId"];
            this.etatId = _data["etatId"];
            this.processeurs = _data["processeurs"];
            this.tailleEcran = _data["tailleEcran"];
            this.ram = _data["ram"];
            this.qualite = _data["qualite"];
            this.position = _data["position"];
            this.typeId = _data["typeId"];
            this.capacite = _data["capacite"];
            this.caracteristiqueId = _data["caracteristiqueId"];
            this.puissance = _data["puissance"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): UpdateArticleCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateArticleCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["stockageId"] = this.stockageId;
        data["couleurId"] = this.couleurId;
        data["nombreDeSim"] = this.nombreDeSim;
        data["imei"] = this.imei;
        data["particulariteId"] = this.particulariteId;
        data["etatId"] = this.etatId;
        data["processeurs"] = this.processeurs;
        data["tailleEcran"] = this.tailleEcran;
        data["ram"] = this.ram;
        data["qualite"] = this.qualite;
        data["position"] = this.position;
        data["typeId"] = this.typeId;
        data["capacite"] = this.capacite;
        data["caracteristiqueId"] = this.caracteristiqueId;
        data["puissance"] = this.puissance;
        data["description"] = this.description;
        return data; 
    }
}

export interface IUpdateArticleCommand {
    id?: string;
    stockageId?: string | undefined;
    couleurId?: string | undefined;
    nombreDeSim?: number | undefined;
    imei?: string | undefined;
    particulariteId?: string | undefined;
    etatId?: string | undefined;
    processeurs?: string | undefined;
    tailleEcran?: string | undefined;
    ram?: string | undefined;
    qualite?: string | undefined;
    position?: string | undefined;
    typeId?: string | undefined;
    capacite?: string | undefined;
    caracteristiqueId?: string;
    puissance?: string | undefined;
    description?: string | undefined;
}

export class UpdateCaracteristiqueCommand implements IUpdateCaracteristiqueCommand {
    id?: string;
    hasStockage?: boolean;
    hasCouleur?: boolean;
    hasNombreDeSim?: boolean;
    hasImei?: boolean;
    hasParticularite?: boolean;
    hasEtat?: boolean;
    hasProcesseurs?: boolean;
    hasTailleEcran?: boolean;
    hasRam?: boolean;
    hasQualite?: boolean;
    hasType?: boolean;
    hasCapacite?: boolean;
    hasCaracteristic?: boolean;
    hasPuissance?: boolean;
    hasPosition?: boolean;
    hasDescription?: boolean;
    modelId?: string;

    constructor(data?: IUpdateCaracteristiqueCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.hasStockage = _data["hasStockage"];
            this.hasCouleur = _data["hasCouleur"];
            this.hasNombreDeSim = _data["hasNombreDeSim"];
            this.hasImei = _data["hasImei"];
            this.hasParticularite = _data["hasParticularite"];
            this.hasEtat = _data["hasEtat"];
            this.hasProcesseurs = _data["hasProcesseurs"];
            this.hasTailleEcran = _data["hasTailleEcran"];
            this.hasRam = _data["hasRam"];
            this.hasQualite = _data["hasQualite"];
            this.hasType = _data["hasType"];
            this.hasCapacite = _data["hasCapacite"];
            this.hasCaracteristic = _data["hasCaracteristic"];
            this.hasPuissance = _data["hasPuissance"];
            this.hasPosition = _data["hasPosition"];
            this.hasDescription = _data["hasDescription"];
            this.modelId = _data["modelId"];
        }
    }

    static fromJS(data: any): UpdateCaracteristiqueCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCaracteristiqueCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["hasStockage"] = this.hasStockage;
        data["hasCouleur"] = this.hasCouleur;
        data["hasNombreDeSim"] = this.hasNombreDeSim;
        data["hasImei"] = this.hasImei;
        data["hasParticularite"] = this.hasParticularite;
        data["hasEtat"] = this.hasEtat;
        data["hasProcesseurs"] = this.hasProcesseurs;
        data["hasTailleEcran"] = this.hasTailleEcran;
        data["hasRam"] = this.hasRam;
        data["hasQualite"] = this.hasQualite;
        data["hasType"] = this.hasType;
        data["hasCapacite"] = this.hasCapacite;
        data["hasCaracteristic"] = this.hasCaracteristic;
        data["hasPuissance"] = this.hasPuissance;
        data["hasPosition"] = this.hasPosition;
        data["hasDescription"] = this.hasDescription;
        data["modelId"] = this.modelId;
        return data; 
    }
}

export interface IUpdateCaracteristiqueCommand {
    id?: string;
    hasStockage?: boolean;
    hasCouleur?: boolean;
    hasNombreDeSim?: boolean;
    hasImei?: boolean;
    hasParticularite?: boolean;
    hasEtat?: boolean;
    hasProcesseurs?: boolean;
    hasTailleEcran?: boolean;
    hasRam?: boolean;
    hasQualite?: boolean;
    hasType?: boolean;
    hasCapacite?: boolean;
    hasCaracteristic?: boolean;
    hasPuissance?: boolean;
    hasPosition?: boolean;
    hasDescription?: boolean;
    modelId?: string;
}

export class UpdateClientCommand implements IUpdateClientCommand {
    id?: string;
    name?: string | undefined;
    lastName?: string | undefined;
    phoneNumber?: string | undefined;
    whatsappNumber?: string | undefined;
    adress?: string | undefined;
    isClientEnGros?: boolean;

    constructor(data?: IUpdateClientCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.lastName = _data["lastName"];
            this.phoneNumber = _data["phoneNumber"];
            this.whatsappNumber = _data["whatsappNumber"];
            this.adress = _data["adress"];
            this.isClientEnGros = _data["isClientEnGros"];
        }
    }

    static fromJS(data: any): UpdateClientCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateClientCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["lastName"] = this.lastName;
        data["phoneNumber"] = this.phoneNumber;
        data["whatsappNumber"] = this.whatsappNumber;
        data["adress"] = this.adress;
        data["isClientEnGros"] = this.isClientEnGros;
        return data; 
    }
}

export interface IUpdateClientCommand {
    id?: string;
    name?: string | undefined;
    lastName?: string | undefined;
    phoneNumber?: string | undefined;
    whatsappNumber?: string | undefined;
    adress?: string | undefined;
    isClientEnGros?: boolean;
}

export class UpdateCouleurCommand implements IUpdateCouleurCommand {
    id?: string;
    name?: string | undefined;
    codeCouleur?: string | undefined;

    constructor(data?: IUpdateCouleurCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.codeCouleur = _data["codeCouleur"];
        }
    }

    static fromJS(data: any): UpdateCouleurCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCouleurCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["codeCouleur"] = this.codeCouleur;
        return data; 
    }
}

export interface IUpdateCouleurCommand {
    id?: string;
    name?: string | undefined;
    codeCouleur?: string | undefined;
}

export class UpdateEtatCommand implements IUpdateEtatCommand {
    id?: string;
    content?: string | undefined;

    constructor(data?: IUpdateEtatCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.content = _data["content"];
        }
    }

    static fromJS(data: any): UpdateEtatCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateEtatCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["content"] = this.content;
        return data; 
    }
}

export interface IUpdateEtatCommand {
    id?: string;
    content?: string | undefined;
}

export class UpdateFournisseurCommand implements IUpdateFournisseurCommand {
    id?: string;
    name?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    whatsappNumber?: string | undefined;

    constructor(data?: IUpdateFournisseurCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.whatsappNumber = _data["whatsappNumber"];
        }
    }

    static fromJS(data: any): UpdateFournisseurCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateFournisseurCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["whatsappNumber"] = this.whatsappNumber;
        return data; 
    }
}

export interface IUpdateFournisseurCommand {
    id?: string;
    name?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    whatsappNumber?: string | undefined;
}

export class UpdateMarqueCommand implements IUpdateMarqueCommand {
    id?: string;
    name?: string | undefined;
    typeArticleId?: string;

    constructor(data?: IUpdateMarqueCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.typeArticleId = _data["typeArticleId"];
        }
    }

    static fromJS(data: any): UpdateMarqueCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateMarqueCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["typeArticleId"] = this.typeArticleId;
        return data; 
    }
}

export interface IUpdateMarqueCommand {
    id?: string;
    name?: string | undefined;
    typeArticleId?: string;
}

export class UpdateModelCommand implements IUpdateModelCommand {
    id?: string;
    name?: string | undefined;
    marqueId?: string;

    constructor(data?: IUpdateModelCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.marqueId = _data["marqueId"];
        }
    }

    static fromJS(data: any): UpdateModelCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateModelCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["marqueId"] = this.marqueId;
        return data; 
    }
}

export interface IUpdateModelCommand {
    id?: string;
    name?: string | undefined;
    marqueId?: string;
}

export class UpdateParticulariteCommand implements IUpdateParticulariteCommand {
    id?: string;
    content?: string | undefined;

    constructor(data?: IUpdateParticulariteCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.content = _data["content"];
        }
    }

    static fromJS(data: any): UpdateParticulariteCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateParticulariteCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["content"] = this.content;
        return data; 
    }
}

export interface IUpdateParticulariteCommand {
    id?: string;
    content?: string | undefined;
}

export class UpdateStockCommand implements IUpdateStockCommand {
    id?: string;
    quantite?: number;
    type?: TypeStockage;
    articleId?: string;

    constructor(data?: IUpdateStockCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.quantite = _data["quantite"];
            this.type = _data["type"];
            this.articleId = _data["articleId"];
        }
    }

    static fromJS(data: any): UpdateStockCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateStockCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["quantite"] = this.quantite;
        data["type"] = this.type;
        data["articleId"] = this.articleId;
        return data; 
    }
}

export interface IUpdateStockCommand {
    id?: string;
    quantite?: number;
    type?: TypeStockage;
    articleId?: string;
}

export class UpdateStockageCommand implements IUpdateStockageCommand {
    id?: string;
    name?: string | undefined;

    constructor(data?: IUpdateStockageCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): UpdateStockageCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateStockageCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IUpdateStockageCommand {
    id?: string;
    name?: string | undefined;
}

export class UpdateTypeArticleCommand implements IUpdateTypeArticleCommand {
    id?: string;
    name?: string | undefined;

    constructor(data?: IUpdateTypeArticleCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): UpdateTypeArticleCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTypeArticleCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IUpdateTypeArticleCommand {
    id?: string;
    name?: string | undefined;
}

export class UpdateTypeCommand implements IUpdateTypeCommand {
    id?: string;
    content?: string | undefined;

    constructor(data?: IUpdateTypeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.content = _data["content"];
        }
    }

    static fromJS(data: any): UpdateTypeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTypeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["content"] = this.content;
        return data; 
    }
}

export interface IUpdateTypeCommand {
    id?: string;
    content?: string | undefined;
}

export class UserModel implements IUserModel {
    id?: string | undefined;
    username?: string | undefined;
    email?: string | undefined;
    firstname?: string | undefined;
    lastname?: string | undefined;
    phoneNumber?: string | undefined;
    roles?: RoleInfo[] | undefined;

    constructor(data?: IUserModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.username = _data["username"];
            this.email = _data["email"];
            this.firstname = _data["firstname"];
            this.lastname = _data["lastname"];
            this.phoneNumber = _data["phoneNumber"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(RoleInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserModel {
        data = typeof data === 'object' ? data : {};
        let result = new UserModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["username"] = this.username;
        data["email"] = this.email;
        data["firstname"] = this.firstname;
        data["lastname"] = this.lastname;
        data["phoneNumber"] = this.phoneNumber;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUserModel {
    id?: string | undefined;
    username?: string | undefined;
    email?: string | undefined;
    firstname?: string | undefined;
    lastname?: string | undefined;
    phoneNumber?: string | undefined;
    roles?: RoleInfo[] | undefined;
}

export class UserModelSearchResult implements IUserModelSearchResult {
    results?: UserModel[] | undefined;
    totalCount?: number;
    countPerPage?: number;
    page?: number;

    constructor(data?: IUserModelSearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(UserModel.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.countPerPage = _data["countPerPage"];
            this.page = _data["page"];
        }
    }

    static fromJS(data: any): UserModelSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new UserModelSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        data["countPerPage"] = this.countPerPage;
        data["page"] = this.page;
        return data; 
    }
}

export interface IUserModelSearchResult {
    results?: UserModel[] | undefined;
    totalCount?: number;
    countPerPage?: number;
    page?: number;
}

export class UserModelUpdate implements IUserModelUpdate {
    id?: string | undefined;
    username?: string | undefined;
    email?: string | undefined;
    firstname?: string | undefined;
    lastname?: string | undefined;
    phoneNumber?: string | undefined;
    roles?: string[] | undefined;

    constructor(data?: IUserModelUpdate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.username = _data["username"];
            this.email = _data["email"];
            this.firstname = _data["firstname"];
            this.lastname = _data["lastname"];
            this.phoneNumber = _data["phoneNumber"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
        }
    }

    static fromJS(data: any): UserModelUpdate {
        data = typeof data === 'object' ? data : {};
        let result = new UserModelUpdate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["username"] = this.username;
        data["email"] = this.email;
        data["firstname"] = this.firstname;
        data["lastname"] = this.lastname;
        data["phoneNumber"] = this.phoneNumber;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        return data; 
    }
}

export interface IUserModelUpdate {
    id?: string | undefined;
    username?: string | undefined;
    email?: string | undefined;
    firstname?: string | undefined;
    lastname?: string | undefined;
    phoneNumber?: string | undefined;
    roles?: string[] | undefined;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}
